{{> layout/header }}

<div class="container mt-5">
    <h2 class="text-center">소셜 로그인 추가 회원 정보 작성</h2>
    <form action="/user/add-kakao-user-info" method="post" id="signUpForm">
        <input type="hidden" name="socialType" id="socialType" value=""> <!-- 기본 소셜 타입 설정 -->

        <div class="form-group">
            <label for="userType">회원 유형 선택</label>
            <div>
                <button type="button" id="freelancerBtn" class="btn btn-outline-secondary">프리랜서</button>
                <button type="button" id="companyBtn" class="btn btn-outline-secondary">기업</button>
            </div>
            <input type="hidden" name="userType" id="userType" value="">
        </div>
        <div class="form-group">
            <label for="username">아이디</label>
            <input type="text" class="form-control" id="username" name="username" placeholder="아이디를 입력해주세요." required>
        </div>
        <!-- 휴대폰 번호 입력 및 인증 -->
        <div class="form-group">
            <label for="phoneNumber">휴대폰 번호</label>
            <input type="text" class="form-control" id="inputPhoneNumber" name="phoneNumber" minlength="11" maxlength="11" placeholder="하이픈(-) 없이 입력해주세요." required>
            <button type="button" id="sendPhoneNumber" class="btn btn-secondary mt-2">인증번호 발송</button>
        </div>

        <!-- 인증번호 입력 -->
        <div class="form-group">
            <label for="inputCertifiedNumber">인증번호</label>
            <input type="text" class="form-control" id="inputCertifiedNumber" maxlength="4" name="certifiedNumber" placeholder="인증번호를 입력해주세요." required>
            <button type="button" id="checkBtn" class="btn btn-secondary mt-2">인증번호 확인</button>
        </div>
        <button type="submit" id="signUpBtn" class="btn btn-primary btn-block">회원가입</button>
    </form>
</div>

<script>
let isPhoneNumberVerified = false; // 휴대폰 인증 확인 변수
let sentCertificationCode; // 발송된 인증번호 변수

// 소셜 타입을 동적으로 설정하는 함수
function setSocialType(type) {
    document.getElementById('socialType').value = type; // hidden input에 소셜 타입 설정
}

// 모든 버튼을 기본 상태로 리셋하는 함수
function resetButtonStyles() {
    document.getElementById('freelancerBtn').classList.remove('btn-primary', 'text-white');
    document.getElementById('freelancerBtn').classList.add('btn-outline-secondary');
    
    document.getElementById('companyBtn').classList.remove('btn-primary', 'text-white');
    document.getElementById('companyBtn').classList.add('btn-outline-secondary');
}

// 프리랜서 버튼 클릭 시 userType 설정
document.getElementById('freelancerBtn').addEventListener('click', function() {
    document.getElementById('userType').value = 'freelancer';
    Swal.fire('프리랜서로 설정되었습니다.');

    // 버튼 스타일 리셋 후, 프리랜서 버튼만 활성화
    resetButtonStyles();
    document.getElementById('freelancerBtn').classList.remove('btn-outline-secondary');
    document.getElementById('freelancerBtn').classList.add('btn-primary', 'text-white');
});

// 기업 버튼 클릭 시 userType 설정
document.getElementById('companyBtn').addEventListener('click', function() {
    document.getElementById('userType').value = 'company';
    Swal.fire('기업으로 설정되었습니다.');

    // 버튼 스타일 리셋 후, 기업 버튼만 활성화
    resetButtonStyles();
    document.getElementById('companyBtn').classList.remove('btn-outline-secondary');
    document.getElementById('companyBtn').classList.add('btn-primary', 'text-white');
});

// 소셜 로그인 성공 시 호출되는 예시 함수 (실제 로그인 로직에 따라 적절히 수정)
function onKakaoLoginSuccess() {
    setSocialType('kakao'); // 카카오 로그인 타입 설정
}

window.onload = function() {
    setSocialType('kakao'); // 페이지 로드 시 기본으로 카카오 타입 설정
};

// 폼 제출 전 인증 확인
document.querySelector('#signUpForm').addEventListener('submit', function(event) {
    const userType = document.getElementById('userType').value;
    
    if (!userType) {
        event.preventDefault(); // 기본 제출 방지
        Swal.fire({
            icon: 'error',
            title: '회원 유형 미선택',
            text: '프리랜서 또는 기업 중 하나를 선택해 주세요.'
        });
    }
    
    if (!isPhoneNumberVerified) {
        event.preventDefault(); // 기본 제출 방지
        alert('휴대폰 인증이 완료되지 않았습니다. 인증을 완료해 주세요.'); // 경고 메시지
    }
});

// sms 인증
$('#sendPhoneNumber').click(function() {
    let phoneNumber = $('#inputPhoneNumber').val();

    // 휴대폰 번호 길이가 11자리인지 확인
    if (phoneNumber.length !== 11) {
        Swal.fire({
            icon: 'error',
            title: '휴대폰 번호 입력 오류',
            text: '휴대폰 번호는 11자리로 입력해주세요.'
        });
        return;
    }

    // 전화번호가 이미 존재하는지 확인
    $.ajax({
        type: "GET",
        url: "/user/checkPhoneNumber",
        data: { phoneNumber: phoneNumber },
        success: function(response) {
            if (response.exists) {
                alert('이 휴대폰 번호는 이미 등록되어 있습니다.'); // 경고 메시지
            } else {
                // 전화번호가 존재하지 않으면 인증번호 발송
                $.ajax({
                    type: "GET",
                    url: "/user/sendSms",
                    data: { phoneNumber: phoneNumber },
                    success: function(res) {
                        sentCertificationCode = res; // 발송된 인증번호 저장
                        Swal.fire('인증번호 발송 완료!');
                    },
                    error: function() {
                        alert('인증번호 발송 중 오류가 발생했습니다.');
                    }
                });
            }
        },
        error: function() {
            alert('전화번호 확인 중 오류가 발생했습니다.');
        }
    });
});

// 인증번호 확인
$('#checkBtn').click(function() {
    if (sentCertificationCode === $('#inputCertifiedNumber').val().trim()) {
        Swal.fire('인증성공!', '휴대폰 인증이 정상적으로 완료되었습니다.', 'success');
        // 휴대폰 인증 완료 상태 설정
        isPhoneNumberVerified = true;

        // 휴대폰 번호 업데이트 요청
        $.ajax({
            type: "GET",
            url: "/update/phone",
            data: { phoneNumber: $('#inputPhoneNumber').val() }
        });
    } else {
        Swal.fire({
            icon: 'error',
            title: '인증오류',
            text: '인증번호가 올바르지 않습니다!'
        });
    }
});
</script>


{{> layout/footer }}
