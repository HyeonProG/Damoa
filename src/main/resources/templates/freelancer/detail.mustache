<style>
    .detail-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }
    .detail-container h2 {
        margin-bottom: 20px;
        text-align: center;
        font-size: 24px;
        color: #333;
    }
    .detail-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 15px;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }
    .detail-item label {
        font-weight: bold;
        font-size: 16px;
        color: #555;
    }
    .detail-item p {
        font-size: 16px;
        color: #444;
        margin: 0;
    }
    .detail-item a {
        color: #007bff;
        text-decoration: none;
    }
    .detail-item a:hover {
        text-decoration: underline;
    }
    .detail-item:last-child {
        border-bottom: none;
    }
    button {
        width: 100%;
        background-color: #007bff;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 5px;
        font-size: 16px;
    }
    button:hover {
        background-color: #0056b3;
    }
</style>

<div class="detail-container">
    <h2>프리랜서 상세 정보</h2>
    
    <div class="detail-item">
    {{! 이름 }}
        <label for="username">이름:</label>
        <p>{{freelancer.username}}</p>
    </div>
    {{! 직무 분야 }}
    <div class="detail-item">
        <label for="jobPart">직무 분야:</label>
        <p>{{freelancer.jobPart}}</p>
    </div>
    {{! 근무 방식 }}
    <div class="detail-item">
        <label for="workingStyle">근무 방식:</label>
        <p>{{freelancer.workingStyle}}</p>
    </div>
    {{! 희망 연봉 }}
    <div class="detail-item">
        <label for="expectedSalary">희망 연봉:</label>
        <p>{{freelancer.expectedSalary}} 만원</p>
    </div>
    {{! 급여 타입 }}
    <div class="detail-item">
        <label for="salaryType">급여 타입:</label>
        <p>{{freelancer.salaryType}}</p>
    </div>
    {{! 포트폴리오 }}
    <div class="detail-item">
        <label for="uploadFileName">포트폴리오 파일:</label>
        {{#freelancer.uploadFileName}}
        <p><a href="/images/portfolio/{{freelancer.uploadFileName}}" target="_blank">포트폴리오 보기</a></p>
        {{/freelancer.uploadFileName}}
        {{^freelancer.uploadFileName}}
        <p>포트폴리오가 없습니다.</p>
        {{/freelancer.uploadFileName}}
    </div>
    {{! 기술 스택 }}
    <div class="detail-item">
        <label for="skills">기술 스택:</label>
        <div class="card-container">
            {{#freelancer.skills}}
            <div class="card">
                <h3>{{this}}</h3>
            </div>
            {{/freelancer.skills}}
        </div>
    </div>
    {{! 경력 }}
    <div class="detail-item">
        <label for="career">경력:</label>
        <div class="card-container">
            {{#freelancer.career}}
            <div class="card">
                <h3>{{this}}</h3>
            </div>
            {{/freelancer.career}}
        </div>
    </div>
    {{! 상세 소개 }}
    <div class="detail-item">
        <label for="detail">상세 소개:</label>
        <p>{{freelancer.detail}}</p>
    </div>
    {{! 링크 }}
    <div class="detail-item">
        <label for="link">링크:</label>
        {{#freelancer.link}}
        <p><a href="{{freelancer.link}}" target="_blank">링크 보기</a></p>
        {{/freelancer.link}}
        {{^freelancer.link}}
        <p>링크가 없습니다.</p>
        {{/freelancer.link}}
    </div>
    <div class="detail-item">
        <button id="chatRequestButton">채팅 신청하기</button>
    </div>

    <div class="detail-item">
        <button onclick="location.href='/freelancer/list'">목록으로 돌아가기</button>
    </div>
</div>

<script>
    document.getElementById('chatRequestButton').addEventListener('click', function() {
        // 예/아니요 알림창 표시
        const confirmation = confirm("채팅 신청을 보내시겠습니까?");
        if (confirmation) {
            // 채팅 신청 로직 실행
            const freelancerId = "{{freelancer.id}}"; // 프리랜서 ID를 가져옵니다.
            
            // AJAX 요청을 통해 채팅 신청 로직을 서버로 전송합니다.
            fetch(`/match/chat-request?freelancerId=${freelancerId}`, {
                method: 'POST', // POST 요청
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // 요청 성공 시 처리
                if (data.success) {
                    alert("채팅 신청이 성공적으로 보내졌습니다.");
                } else {
                    alert("채팅 신청에 실패했습니다: " + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert("채팅 신청 중 오류가 발생했습니다.");
            });
        }
    });
</script>