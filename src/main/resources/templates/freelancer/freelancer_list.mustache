{{> layout/header}}

<h1>프리랜서 목록</h1>

<div id="freelancer-list" class="freelancer-cards-container">
    <!-- JavaScript로 프리랜서 카드 목록이 여기에 추가됩니다 -->
</div>

<div id="paginationContainer"></div> <!-- 페이지네이션을 위한 컨테이너 -->

<!-- 스타일 추가 -->
<style>
    .freelancer-cards-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        margin-top: 20px;
    }

    .freelancer-card {
        width: 300px;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #fff;
        transition: transform 0.2s;
        cursor: pointer; /* 클릭 가능한 요소로 변경 */
    }

    .freelancer-card:hover {
        transform: translateY(-5px);
    }

    .freelancer-card h2 {
        font-size: 1.5em;
        margin-bottom: 10px;
    }

    .freelancer-card p {
        margin: 5px 0;
        font-size: 0.9em;
        color: #555;
    }

    .freelancer-card .card-label {
        font-weight: bold;
        color: #333;
    }

    .pagination {
        list-style: none;
        display: flex;
        justify-content: center;
        padding: 0;
    }

    .pagination .page-item {
        margin: 0 5px;
    }

    .pagination .page-link {
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
        text-decoration: none;
        color: #007bff;
    }

    .pagination .page-item.active .page-link {
        background-color: #007bff;
        color: #fff;
    }

    .pagination .page-item.disabled .page-link {
        color: #ccc;
    }
</style>

<script>
    let currentPage = 1; // 현재 페이지
    const pageSize = 5; // 페이지당 항목 수

    // 프리랜서 목록 로드
    function loadFreelancers(page) {
        fetch(`/freelancer/list/data?page=${page}&size=${pageSize}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log("Data:", data); // 데이터 로그
                const freelancerList = document.getElementById('freelancer-list');
                freelancerList.innerHTML = ''; // 기존 목록 초기화

                // freelancers가 정의되어 있는지 확인
                if (Array.isArray(data.freelancers)) {
                    data.freelancers.forEach(freelancer => {
                        const card = document.createElement('div');
                        card.className = 'freelancer-card';
                        card.innerHTML = `
                            <h2>${freelancer.username}</h2>
                            <p><span class="card-label">직무:</span> ${freelancer.jobPart}</p>
                            <p><span class="card-label">근무 방식:</span> ${freelancer.workingStyle}</p>
                            <p><span class="card-label">기술 스택:</span> ${freelancer.skills || ""}</p>
                            <p><span class="card-label">상세 내용:</span> ${freelancer.detail}</p>
                        `;

                        // 카드 클릭 시 상세보기 페이지로 이동
                        card.addEventListener('click', () => {
                            window.location.href = `/freelancer/detail/${freelancer.userId}`;
                        });

                        freelancerList.appendChild(card);
                    });
                } else {
                    console.warn("No freelancers found.");
                }

                currentPage = data.currentPage;
                renderPagination(data.totalCount, currentPage, pageSize, data.totalPages); // 페이지네이션 렌더링
            })
            .catch(error => console.error('Error:', error));
    }

    // 페이지네이션을 렌더링하는 함수
    function renderPagination(totalCount, currentPage, pageSize, totalPages) {
        const paginationContainer = document.getElementById('paginationContainer');

        // 기존 페이지네이션 항목 제거
        while (paginationContainer.firstChild) {
            paginationContainer.removeChild(paginationContainer.firstChild);
        }

        // 페이지네이션 리스트 생성
        const ul = document.createElement('ul');
        ul.className = 'pagination';

        // 이전 페이지 링크
        const prevLi = document.createElement('li');
        prevLi.className = currentPage > 1 ? 'page-item' : 'page-item disabled';
        const prevLink = document.createElement('a');
        prevLink.className = 'page-link';
        prevLink.textContent = '이전';
        prevLink.addEventListener('click', (event) => {
            event.preventDefault(); // 페이지 이동 및 새로 고침 방지
            if (currentPage > 1) { loadFreelancers(currentPage - 1); }
        });
        prevLi.appendChild(prevLink);
        ul.appendChild(prevLi);

        // 페이지 번호 링크
        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement('li');
            li.className = i === currentPage ? 'page-item active' : 'page-item';
            const link = document.createElement('a');
            link.className = 'page-link';
            link.textContent = i;
            link.addEventListener('click', (event) => {
                event.preventDefault(); // 페이지 이동 및 새로 고침 방지
                loadFreelancers(i); // 해당 페이지 로드
            });
            li.appendChild(link);
            ul.appendChild(li);
        }

        // 다음 페이지 링크
        const nextLi = document.createElement('li');
        nextLi.className = currentPage < totalPages ? 'page-item' : 'page-item disabled';
        const nextLink = document.createElement('a');
        nextLink.className = 'page-link';
        nextLink.textContent = '다음';
        nextLink.addEventListener('click', (event) => {
            event.preventDefault(); // 페이지 이동 및 새로 고침 방지
            if (currentPage < totalPages) { loadFreelancers(currentPage + 1); }
        });
        nextLi.appendChild(nextLink);
        ul.appendChild(nextLi);

        // 완성된 페이지네이션을 페이지네이션 컨테이너에 추가
        paginationContainer.appendChild(ul);
    }

    // 페이지 로드 시 기본 페이지 로드
    loadFreelancers(currentPage);
</script>

{{> layout/footer}}
