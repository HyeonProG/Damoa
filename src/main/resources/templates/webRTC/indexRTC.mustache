<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <link rel="stylesheet" href="/css/indexRTC.css">
</head>
<style>
    #videos{
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap:2em;
}
.video-player{
    background-color: black;
    width: 100%;
    height: 300px;
}

</style>
<body>

<div id="videos">
    <video class="video-player" id="user-1" autoplay playsinline></video>
    <video class="video-player" id="user-2" autoplay playsinline></video>
</div>
</body>
</html>

<script>

    let localStream;
let remoteStream;
let peerConnection;



const servers = {
    iceServers:[
        {
            urls:['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302']
        }
    ]
}

let init = async () => {
   localStream = await navigator.mediaDevices.getUserMedia({video:true, audio:false})
   document.getElementById('user-1').srcObject = localStream

   createOffer()
}

let createOffer = async () => {
    peerConnection = new RTCPeerConnection(servers)

    remoteStream = new MediaStream()
    document.getElementById('user-2').srcObject = remoteStream

    localStream.getTracks().forEach((track) => {
        peerConnection.addTrack(track, localStream)
    })

    peerConnection.ontrack = (event) => {
        event.streams[0].getTracks().forEach((track) => {
            remoteStream.addTrack()
        })
    }

    peerConnection.onicecandidate = async(event) => {
        if(event.candidate){
            console.log('New ICE candidate: ', event.candidate)
        }
    }


    let offer = await peerConnection.createOffer()
    await peerConnection.setLocalDescription(offer)

    console.log('Offer:',offer)
}

init()

</script>
<script src="/js/main.js"></script>